#include <iostream>
#include<string> 
#include <chrono>
#include <thread>

//struct getCupNum
//{
//	int userInput;
//};

int userInput;

class Bean
{
public:
	const int beanNum = 45;
	const int singleCupOz = 10;
	int totalOz = singleCupOz * userInput;
	int totalNum = beanNum * userInput;
	int *ptrBeanOz;
	ptrBeanOz = &totalOz;
	int *ptrBeanNum;
	ptrBeanNum = &totalNum;
	countBeans(int userInput);
	
	beanGrind();
};


class Reservoir {
public:
	const int singleCupWater = 1;
	int water = 5; //assuming a coffee maker can make 5 cups at first
	int currentWater;
	int *ptrWater;
	ptrWater = &currentWater;
	int totalWater = singleCupWater * userInput;
	int waterRefill = 5;
	
	waterPrep(int);		
};


class Heat{
public:
 	int initialHeat = 75;
	const int goalHeat = 185;
	int *ptrCurrentHeat;
	ptrCurrentHeat = &initialHeat;
	
	heating();		
};

bool intCheck(string input) 
{ 
    for (int i = 0; i < input.length(); i++) 
        if (isdigit(input[i]) == false) 
            return false; 
  
    return true; 
} 

int main()
{
	
	std::cout << "welcome to use this second-handed coffer maker!\n";
	std::cout << "so how many cups do you want to have? \n";
	std::cout << "reminder: it has to be integer and > 0\n";
	std::cout << "input the number of cup: \n";
	
	string input;
	int userInput;
	
//	int *pInput;
//	pInput = &userInput;
	cin >> input;
	
	if (intCheck(input)){
		userInput = input;
		if(userInput > 0){
			std::cout << "order confirmed\n";
			std::cout << "getting ready for coffee... \n";
			
			userInput = input;
	
	
			int Bean::countBeans(int userInput){
			    int *ptrBeanNum;
			    ptrBeanNum = new int;
			    *ptrBeanNum = *pInput * beanNum;
			    std::cout << "so : " << *ptrBeanNum << " beans will start grinding for you in a second\n";
			    delete ptrBeanNum;
			    
			    int *ptrBeanOz;
			    ptrBeanOz = new int;
			    *ptrBeanOz = userInput * singleCupOz;
			    std::cout << "so : " << *ptrBeanOz << "oz of beans will start grinding for you in a second\n";
			    delete ptrBeanOz;	
					
			}
			
			int  Reservoir::waterPrep(int userInput){
				std::cout << "checking reservoir...\n";
				std::this_thread::sleep_for(std::chrono::milliseconds(1000));	
				std::cout << "you need " << userInput << " cup(s) of coffee \n";
				int *ptrWater;
				ptrWater = new int;
				*ptrWater = water - userInput;
				
					if(*ptrWater > totalWater) {
						std::cout << "great, water is enough \n";
						std::cout << "heating starts soon...\n";
					}
					
					else{
						while(*ptrWater < totalWater){
							*ptrWater = *ptrWater + waterRefill;
							std::cout << "wait, water is being refilled...\n";
					}
						std::cout << "water is enough\n";
						std::cout << "heating starts soon...\n";
					}
				delete ptrWater;		
				}
			std::cout << "water is getting ready\n";
		
		//	Reservoir reservoir;
		//	reservoir.waterPrep(userInput);
			  
		//    if (*ptrBean < totalBean){
		//    	std::cout << "wonderful. there are enough beans";	
		//	}
		
			void Bean::beanGrind() 
			{
				std::cout << *ptrBeanNum << "\n beans are now being grinded...\n";
		
				for (int process = 0; process < = 100; process = process + 20)
				{
						std::cout << process << "% beans are now being grinded...\n";
						std::this_thread::sleep_for(std::chrono::milliseconds(500));	
				}
				std::cout << "your coffee will be ready soon" << endl;
				
			}
			
			void Heat::heating(){
				std::cout << "heating start... you're almost there\n";
				int *ptrCurrentHeat;
				ptrCurrentHeat = &initialHeat;
				ptrCurrentHeat = new int;
				for(*ptrCurrentHeat = initialHeat; *ptrCurrentHeat<= goalHeat; *ptrCurrentHeat = *ptrCurrentHeat + 10)
				{
						std::cout << "the temperature of water is " << *ptrCurrentHeat << "...\n"; 
						//10 milliseconds are too short to feel any pause
						std::this_thread::sleep_for(std::chrono::milliseconds(10)); 
				}
					delete ptrCurrentHeat;
			}		
		
			std::cout << "great "<< userInput << "cup(s) coffee is ready, enjoy! \n";
			std::cout << "wait, it's hot. do enjoy it, but later." <<endl;			
			}
			
			
		else{
			std::cout << "error! your input is supposed to > 0, order fails to proceed...\n";
			exit(0);
		}
		
	} 
	
	else {
		std::cout << "error! not an integer. sorry, order fails to proceed.";
		exit(0);
	}	


	return 0;

}
